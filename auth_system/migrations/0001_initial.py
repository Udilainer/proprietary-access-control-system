# Generated by Django 4.2.13 on 2025-08-02 10:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='Last Name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='BusinessObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="A unique code for the business object, e.g., 'products', 'orders'", max_length=100, unique=True, verbose_name='Object Code')),
                ('name', models.CharField(help_text="A human-readable name for the object, e.g., 'Product Catalog'", max_length=255, verbose_name='Object Name')),
            ],
            options={
                'verbose_name': 'Business Object',
                'verbose_name_plural': 'Business Objects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the role, e.g., 'Administrator', 'Content Manager'", max_length=100, unique=True, verbose_name='Role Name')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlacklistedToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jti', models.CharField(help_text='The unique identifier of the blacklisted token.', max_length=255, unique=True, verbose_name='JWT ID')),
                ('expires_at', models.DateTimeField(help_text='The timestamp when the token expires and can be purged.', verbose_name='Expires At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blacklisted_tokens', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Blacklisted Token',
                'verbose_name_plural': 'Blacklisted Tokens',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(blank=True, help_text='The primary role assigned to the user.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth_system.role', verbose_name='Role'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_create', models.BooleanField(default=False, verbose_name='Can Create')),
                ('can_read_own', models.BooleanField(default=False, verbose_name='Can Read Own')),
                ('can_read_all', models.BooleanField(default=False, verbose_name='Can Read All')),
                ('can_update_own', models.BooleanField(default=False, verbose_name='Can Update Own')),
                ('can_update_all', models.BooleanField(default=False, verbose_name='Can Update All')),
                ('can_delete_own', models.BooleanField(default=False, verbose_name='Can Delete Own')),
                ('can_delete_all', models.BooleanField(default=False, verbose_name='Can Delete All')),
                ('business_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth_system.businessobject', verbose_name='Business Object')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth_system.role', verbose_name='Role')),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
                'ordering': ['role__name', 'business_object__name'],
                'unique_together': {('role', 'business_object')},
            },
        ),
    ]
